PROCEDIMIENTO Método HTTP GET - API REST - Conexión a MYSQL

1. En el buscador de google ponemos "npm", abrimos el primer link y alli podemos encontrar definiciones que hemos trabajado como "express" , "nodemon", etc. Pero para este caso es bueno revisar el "dotenv".
    Dotenv: es un módulo de dependencia cero que carga variables de entorno desde un .envarchivo a process.env. El almacenamiento de la configuración en el entorno separado del código se basa en la metodología de la aplicación The Twelve-Factor.


2. Trabajo en el archivo ".env"
    2.1. Puntos 1-4, declaracion de las varibles de entorno.


3. Instalacion del dotenv
    3.1. Abrir el terminal ya sea bash o powershell: Terminal/New Terminal
    3.2. Entrar a la carpeta "backend": cd backend
    3.3. Instalacion del dotenv: "npm i dotenv" o "npm install dotenv"
    3.4. Revisar en el archivo package.json, observar que en el objeto "dependencies" y adentro esta el "dotenv"


4. Trabajo en el archivo "config.js"
    2.1. Puntos 1-3.


5. Gestionar la conexión a la base de datos
    5.1. Crear un archivo llamado "database.js" dentro de la carpeta "db".
    5.2. Instalacion de promise-msyql
        5.2.1. Abrir el terminal ya sea bash o powershell: Terminal/New Terminal
        5.2.2. Entrar a la carpeta "backend": cd backend
        5.2.3 Instalacion del promise-mysql: "npm i promise-mysql" o "npm install promise-mysql"
        5.2.3 Revisar en el archivo package.json, observar que en el objeto "dependencies" y adentro esta el "promise-mysql"
    5.3. Trabajo en el archivo "database.js"
        5.3.1. Puntos 1-6.
    5.4. Trabajo en el archivo "categoria.controllers.js" 
        5.4.1. Comentar la constante getCategorias y su arrow function
        5.4.2. Puntos 3-4(4.1 al 4.4)


6. Explicación del connection.query() -> Este me permite ir a la base de datos "facturartemis" en phpMyAdmin y extraer filas y datos de cualquier tabla.
    6.1. Procedimiento para llenar los parentesis
        6.1.1. SELECT -> este me dice que va a seleccionar algo de la base de datos de "facturartemis"
        6.1.2. nombres de las columnas -> despues del SELECT se ponen el nombre de las columnas de las cuales quiero extraer datos, se deben llamar tal y como esta en la base de datos y se separan con una coma (,).
        6.1.3. FROM -> significa DESDE, eso quiere decir que me da la pauta para despues colocar la tabla de donde quiero sacar esos datos
        6.1.4. nombre de la tabla -> coloco el nombre de la tabla donde estan esas columnas y de donde quiero sacar los datos.
        6.1.5. Ejemplo de la tabla categorias de la base de datos "facturartemis : 
                connection.query("SELECT CategoriaID, CategoriaNombre, Descripcion, Imagen FROM categorias");


7. Verificación de lo que hemos hecho funciona forma 1
    7.1. Correr el programa en el terminal: "npm run dev" (verificar que este dentro de la carpeta backend)
    7.2. Abrir una pestañana en el navegador y escribir : "localhost:5000/api/categorias" (se debe añadir el /api/categorias de acuerdo a lo que hicimos en el archivo "app.js" punto 7)
    7.3. Observar la API de categorias, donde se ven todos los datos de la tabla. Ahi lo que hicimos fue recuperar en formato JSON cada una de las filas de la tabla categorias de mi base de datos.


8. Verificación de lo que hemos hecho funciona forma 2
    8.1. Correr el programa en el terminal: "npm run dev" (verificar que este dentro de la carpeta backend)
    8.2. Dentro del visual studio abrimos el THUNDER CLIENT (si no lo tenemos podemos ir a extensiones y buscarla y descargarla)
    8.3. Una vez dnetro del THUNDER CLIENT , damos clic en New Request, y en la barra que parece un navegador escribimos lo siguiente: "http://localhost:5000/api/categorias" (se debe añadir el /api/categorias de acuerdo a lo que hicimos en el archivo "app.js" punto 7)
    8.4. Verfificamos que en la parte izquierda este seleccionado "GET" y despues damos clic en "Send".
    8.5. Auntomaticamente debe aparecer la API en la parte derecha.

    
